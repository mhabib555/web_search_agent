import asyncio
import json
from agents import Runner, SQLiteSession, ItemHelpers
from aiagents.information_gathering_agent import information_gathering_agent
from config.context import UserContext
from config.fake_data import fake_users
from config.config import logger

# ANSI escape codes for colors
RESET = "\033[0m"
CYAN = "\033[36m"
YELLOW = "\033[33m"
GREEN = "\033[32m"
BLUE = "\033[34m"
MAGENTA = "\033[35m"
WHITE = "\033[1;37m"  # Bold white
RED = "\033[31m"

# Initialize SQLite session for storing research data
try:
    session = SQLiteSession("deep_research")
except Exception as e:
    logger.error(f"Failed to initialize SQLite session: {str(e)}")
    print(f"{RED}Error: Failed to initialize SQLite session: {str(e)}{RESET}")
    raise

async def main():
    try:
        # Select user context from fake_users data
        user_index = 1
        if user_index >= len(fake_users):
            raise IndexError("Invalid user index")
        user_context = UserContext(
            name=fake_users[user_index]['name'],
            city=fake_users[user_index]['city'],
            topic=fake_users[user_index]['topic'],
            subscription=fake_users[user_index]['subscription']
        )

        while True:
            try:
                # Print system header and query prompt in cyan
                print(f"{CYAN}\n================ Deep Research System ================{RESET}")
                sample_query = "How did the adoption of server-side rendering with Laravel improve page load times of websites, concise?"
                print(f"{CYAN}Type enter to query: {sample_query}{RESET}")
                print(f"{CYAN}Type 'exit' to quit.{RESET}")
                user_input = input(f"{CYAN}\nEnter your research query: {RESET}").strip()

                if user_input.lower() == 'exit':
                    break
                elif user_input == "":
                    user_input = sample_query  # Use default query if input is empty
                    print(f"{YELLOW}Searching for default query: {user_input}{RESET}")

                # Run Information Gathering Agent
                print(f"{GREEN}\nRunning Information Gathering Agent...{RESET}")
                response = Runner.run_streamed(
                    starting_agent=information_gathering_agent,
                    input=user_input,
                    context=user_context,
                    max_turns=12,
                    session=session
                )

                final_report = ""
                last_agent = ""
                async for event in response.stream_events():
                    if event.type == "agent_updated_stream_event":
                        last_agent = event.new_agent.name
                        continue
                    elif event.type == "run_item_stream_event":
                        if event.item.type == "message_output_item":
                            final_report = ItemHelpers.text_message_output(event.item)
                            print(f"{BLUE}\n\n[{last_agent}] Response: {final_report}...{RESET}")
                        elif event.item.type == "tool_call_output_item":
                            print(event.item.output)
                            try:
                                tool_output = json.loads(event.item.output)
                                print(f"{MAGENTA}Tool output: {tool_output}{RESET}")
                            except json.JSONDecodeError as je:
                                pass
                                # logger.error(f"Failed to parse tool output: {str(je)}")
                                # print(f"{RED}Failed to parse tool output: {str(je)}{RESET}")

                # Print final report if generated by ReportWriterAgent in bold white
                if final_report and last_agent == "ReportWriterAgent":
                    print(f"{WHITE}\n\n\n================================{RESET}")
                    print(f"{WHITE}\n=== {last_agent} Research Report ===\n{RESET}")
                    print(f"{WHITE}{final_report}{RESET}")
                    print(f"{WHITE}\n=== End of Report ===\n{RESET}")

            except KeyboardInterrupt:
                logger.info("User interrupted the process")
                print(f"{YELLOW}User interrupted the process{RESET}")
                break
            except Exception as e:
                logger.error(f"Error in main loop: {str(e)}")
                print(f"{RED}Error: {str(e)}{RESET}")
                continue  # Continue loop to allow new queries

    except IndexError as ie:
        logger.error(f"User context error: {str(ie)}")
        print(f"{RED}Error: {str(ie)}{RESET}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error in main: {str(e)}")
        print(f"{RED}Error: {str(e)}{RESET}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"Error running asyncio: {str(e)}")
        print(f"{RED}Error: {str(e)}{RESET}")
        raise