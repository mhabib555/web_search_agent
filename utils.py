import os
from agents import SQLiteSession, RunHooks, RunContextWrapper, Agent, Tool
from config.context import UserContext
from config.fake_data import fake_users
from config.config import logger
from config.constants import RESET, CYAN, YELLOW, WHITE, RED

def initialize_sqlite_session(db_name: str) -> SQLiteSession:
    """Initialize SQLite session for storing research data.
    
    Args:
        db_name (str): Name of the SQLite database.
    
    Returns:
        SQLiteSession: Initialized session object.
    
    Raises:
        Exception: If session initialization fails.
    """
    try:
        return SQLiteSession(db_name)
    except Exception as e:
        logger.error("Failed to initialize SQLite session: %s", str(e))
        print(f"{RED}Error: Failed to initialize SQLite session: {str(e)}{RESET}")
        raise

def get_user_context(user_index: int) -> UserContext:
    """Create and validate UserContext from fake_users data.
    
    Args:
        user_index (int): Index of the user in fake_users data.
    
    Returns:
        UserContext: Validated user context object.
    
    Raises:
        IndexError: If user_index is invalid.
    """
    if user_index >= len(fake_users):
        raise IndexError("Invalid user index")
    return UserContext(
        name=fake_users[user_index]['name'],
        city=fake_users[user_index]['city'],
        topic=fake_users[user_index]['topic'],
        subscription=fake_users[user_index]['subscription']
    )

def get_user_input(default_query: str = "", prompt_type: str = "initial") -> str:
    """Prompt user for input with context-specific messages.
    
    Args:
        default_query (str): Default query to use if user input is empty (optional).
        prompt_type (str): Type of prompt to display ('initial', 'additional', or 'new_topic').
    
    Returns:
        str: User-provided query, default query, or 'exit'.
    """
    print(f"{CYAN}\n================ Deep Research System ================{RESET}")

    if prompt_type == "initial":
        if default_query:
            print(f"{CYAN}Type enter to query: {default_query}{RESET}")
        print(f"{CYAN}Type 'exit' to quit.{RESET}")
        prompt_message = f"{CYAN}\nEnter your research query: {RESET}"
    elif prompt_type == "additional":
        print(f"{CYAN}Please provide additional details to complete the information.{RESET}")
        print(f"{CYAN}Type 'exit' to quit.{RESET}")
        prompt_message = f"{CYAN}\nEnter additional details: {RESET}"
    elif prompt_type == "new_topic_or_save":
        print(f"{CYAN}Type 'save' to save report as markdown.{RESET}")
        print(f"{CYAN}Search another topic or type 'exit' to quit.{RESET}")
        prompt_message = f"{CYAN}\nEnter your next research query: {RESET}"
    elif prompt_type == "new_topic":
        print(f"{CYAN}Search another topic or type 'exit' to quit.{RESET}")
        prompt_message = f"{CYAN}\nEnter your next research query: {RESET}"
    elif prompt_type == "failed_report":
        print(f"{RED}Failed to generate report.{RESET}")
        print(f"{CYAN}Search another topic or type 'exit' to quit.{RESET}")
        prompt_message = f"{CYAN}\nEnter your next research query: {RESET}"
    else:
        # Fallback to default prompt
        print(f"{CYAN}Type 'exit' to quit.{RESET}")
        prompt_message = f"{CYAN}\nEnter your research query: {RESET}"

    user_input = input(prompt_message).strip()

    if user_input.lower() == 'exit':
        return 'exit'
    elif user_input == "" and default_query and prompt_type == "initial":
        print(f"{YELLOW}Searching for default query: {default_query}{RESET}")
        return default_query
    return user_input

def display_final_report(final_report: str):
    """Display the final report if generated by ReportWriterAgent.
    
    Args:
        final_report (str): The final report text.
        last_agent (str): Name of the agent that produced the report.
    """
    print(f"{WHITE}\n=== Research Report ===\n{RESET}")
    print(f"{WHITE}{final_report}{RESET}")
    print(f"{WHITE}\n=== End of Report ===\n{RESET}")


def save_as_markdown(report: str, filename: str = "research_report.md") -> str:
    """Save the formatted report as a Markdown file and return the file path.

    Args:
        report (str): The report content to save.
        filename (str): The name of the file to save the report to. Defaults to 'research_report.md'.
    
    Returns:
        str: The file path if successful, or an error message if saving fails.
    
    Raises:
        Exception: If there are issues with file operations (e.g., permission denied, directory not found).
    """
    try:
        filepath = os.path.join("reports", filename)
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(report)
        return filepath
    except Exception as e:
        return f"Error saving Markdown file: {str(e)}"



class RunAgentHooks(RunHooks):
    """A class that implements lifecycle hooks for agent execution and interaction events."""

    async def on_agent_start(self, context: RunContextWrapper, agent: Agent):
        print(f"\n\n[RunLifecycle] Agent {agent.name} started working...\n\n")

    async def on_llm_start(self, context: RunContextWrapper, agent: Agent, system_prompt, input_items):
        print(f"\n\n[RunLifecycle] LLM call for agent {agent.name} starting with system prompt: {system_prompt} and input items: {input_items}\n\n")

    async def on_agent_end(self, context: RunContextWrapper, agent: Agent, result):
        print(f"\n\n[RunLifecycle] Agent {agent.name} ended with result: {result}\n\n")

    async def on_llm_end(self, context: RunContextWrapper, agent: Agent, response):
        print(f"\n\n[RunLifecycle] LLM call for agent {agent.name} ended with response: {response}\n\n")

    async def on_handoff(self, context, from_agent, to_agent):
        print(f"\n\n[RunLifecycle] Handoff from agent {from_agent.name} to agent {to_agent.name}\n\n")

    async def on_tool_start(self, context: RunContextWrapper, agent: Agent, tool: Tool):  
        print(f"\n\n[RunLifecycle] Tool {tool.name} for agent {agent.name}\n\n")